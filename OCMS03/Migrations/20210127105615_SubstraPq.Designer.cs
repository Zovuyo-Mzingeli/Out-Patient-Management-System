// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OCMS03.Data;

namespace OCMS03.Migrations
{
    [DbContext(typeof(OCMS03_TheCollectiveContext))]
    [Migration("20210127105615_SubstraPq")]
    partial class SubstraPq
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OCMS03.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("OCMS03.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Citizenship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ClinicId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Idnumber")
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsResetPasswordRequired")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextOfKinNumber")
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("NextOfKinSurname")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NextOfName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("ProvinceId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("UserStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ProvinceId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("OCMS03.Models.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("OCMS03.Models.CartLine", b =>
                {
                    b.Property<string>("Patient_PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<bool>("Afternoon")
                        .HasColumnType("bit");

                    b.Property<string>("Dose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Evening")
                        .HasColumnType("bit");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Morning")
                        .HasColumnType("bit");

                    b.Property<string>("Patient_MedicationPatient_MedsId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PrescriptionId")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Patient_PrescriptionId");

                    b.HasIndex("MedicationId");

                    b.HasIndex("Patient_MedicationPatient_MedsId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("tblCartLine");
                });

            modelBuilder.Entity("OCMS03.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tblClaims");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Allergy", b =>
                {
                    b.Property<string>("AllergyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("AllergyTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AllergyId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("tblAllergy");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Appointment", b =>
                {
                    b.Property<string>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppointmentDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("ClinicId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DoctorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("HospitalId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<string>("WalkInId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("apptStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("AppointmentId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("NurseId");

                    b.HasIndex("PatientId");

                    b.HasIndex("WalkInId");

                    b.ToTable("tblAppointment");
                });

            modelBuilder.Entity("OCMS03.Models.Content.City", b =>
                {
                    b.Property<string>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DistrictId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CityId");

                    b.HasIndex("DistrictId");

                    b.ToTable("tblCity");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Clinic", b =>
                {
                    b.Property<string>("ClinicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.HasKey("ClinicId");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("tblClinic");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Department", b =>
                {
                    b.Property<string>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HospitalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentId");

                    b.HasIndex("HospitalId");

                    b.ToTable("tblDepartment");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Diagnosis", b =>
                {
                    b.Property<string>("DiagnosisCode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("AppointmentId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExaminationNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DiagnosisCode");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tblDiagnosis");
                });

            modelBuilder.Entity("OCMS03.Models.Content.District", b =>
                {
                    b.Property<string>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("tblDistrict");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Hospital", b =>
                {
                    b.Property<string>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("ProvinceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.HasKey("HospitalId");

                    b.HasIndex("CityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("tblHospital");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Medication", b =>
                {
                    b.Property<string>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("ActiveIngredients")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Form")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("MedExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PackSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuantityAndLimitation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistryNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrengthOrPacksize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationId");

                    b.ToTable("tblMedication");
                });

            modelBuilder.Entity("OCMS03.Models.Content.PatientVitals", b =>
                {
                    b.Property<string>("VitalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("BMI")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainScore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pulse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepertoryRate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SPO2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Temperature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VitalsId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tblPatientVitals");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Patient_AllergyDiagnosis", b =>
                {
                    b.Property<string>("PatientAllergyDiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("AllergyDiagnoseTestType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllergyId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AllergySymptoms")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CheckedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhysicalExamNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientAllergyDiagnosisId");

                    b.HasIndex("AllergyId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tblPatientAllergyDiagnosis");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Prescription", b =>
                {
                    b.Property<string>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PharmacistId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrescriptionNotes")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<bool>("SeenByPharmacist")
                        .HasColumnType("bit");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PharmacistId");

                    b.HasIndex("StaffId");

                    b.ToTable("tblPrescription");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Province", b =>
                {
                    b.Property<string>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("ProvinceId");

                    b.ToTable("tblProvince");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Referral", b =>
                {
                    b.Property<string>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferalDescriptin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ReferralId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("tblReferral");
                });

            modelBuilder.Entity("OCMS03.Models.Content.WalkIn", b =>
                {
                    b.Property<string>("WalkInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Idnumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextOfKinNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(13)")
                        .HasMaxLength(13);

                    b.Property<string>("NextOfKinSurname")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NextOfName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VistingTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WalkInId");

                    b.ToTable("tblWalkIn");
                });

            modelBuilder.Entity("OCMS03.Models.Patient_Medication", b =>
                {
                    b.Property<string>("Patient_MedsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("MedsReceived")
                        .HasColumnType("bit");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PharmacistId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Patient_MedsId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PharmacistId");

                    b.ToTable("tblPatient_Medication");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.ApplicationUser", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("OCMS03.Models.Content.Clinic", null)
                        .WithMany("TblUser")
                        .HasForeignKey("ClinicId");

                    b.HasOne("OCMS03.Models.Content.Department", "Department")
                        .WithMany("TblUser")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("OCMS03.Models.Content.Hospital", null)
                        .WithMany("TblUser")
                        .HasForeignKey("HospitalId");

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblUser")
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("OCMS03.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.CartLine", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId");

                    b.HasOne("OCMS03.Models.Patient_Medication", null)
                        .WithMany("Lines")
                        .HasForeignKey("Patient_MedicationPatient_MedsId");

                    b.HasOne("OCMS03.Models.Content.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionId");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Allergy", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationUser", null)
                        .WithMany("Allergies")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("OCMS03.Models.Content.Appointment", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Clinic", "Clinic")
                        .WithMany("TblAppointment")
                        .HasForeignKey("ClinicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS03.Models.Content.Hospital", "Hospital")
                        .WithMany("TblAppointment")
                        .HasForeignKey("HospitalId");

                    b.HasOne("OCMS03.Models.ApplicationUser", "Nurse")
                        .WithMany("NurseAppointments")
                        .HasForeignKey("NurseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS03.Models.ApplicationUser", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS03.Models.Content.WalkIn", "WalkIn")
                        .WithMany("Appointments")
                        .HasForeignKey("WalkInId");
                });

            modelBuilder.Entity("OCMS03.Models.Content.City", b =>
                {
                    b.HasOne("OCMS03.Models.Content.District", "District")
                        .WithMany("City")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Clinic", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblClinic")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblClinic_tblCity")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblClinic")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblClinic_tblProvince")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Department", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Hospital", "Hospital")
                        .WithMany("Departments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Diagnosis", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Appointment", null)
                        .WithMany("TblDiagnosis")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("OCMS03.Models.Content.Department", null)
                        .WithMany("TblDiagnosis")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("OCMS03.Models.ApplicationUser", "Patient")
                        .WithMany("PatientDiagnosis")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "Staff")
                        .WithMany("Staff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.District", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblDistrict")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblDistrict_tblProvince")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Hospital", b =>
                {
                    b.HasOne("OCMS03.Models.Content.City", "City")
                        .WithMany("TblHospital")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_tblHospital_tblCity")
                        .IsRequired();

                    b.HasOne("OCMS03.Models.Content.Province", "Province")
                        .WithMany("TblHospital")
                        .HasForeignKey("ProvinceId")
                        .HasConstraintName("FK_tblHospital_tblProvince")
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.PatientVitals", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationUser", "Patient")
                        .WithMany("PatientVitals")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "Staff")
                        .WithMany("StaffRecorded")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Patient_AllergyDiagnosis", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Allergy", "Allergy")
                        .WithMany("AllergyDiagnosis")
                        .HasForeignKey("AllergyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "Patient")
                        .WithMany("PatientAllergy")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "Staff")
                        .WithMany("StaffMember")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Prescription", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationUser", "Patient")
                        .WithMany("PatientPrescription")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "Pharmacist")
                        .WithMany("PharmacistPrescription")
                        .HasForeignKey("PharmacistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS03.Models.ApplicationUser", "DoctorOrNurse")
                        .WithMany("DoctorOrNursePrescription")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Content.Referral", b =>
                {
                    b.HasOne("OCMS03.Models.Content.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "Patient")
                        .WithMany("ReferralPatient")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OCMS03.Models.ApplicationUser", "Staff")
                        .WithMany("ReferralStaff")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("OCMS03.Models.Patient_Medication", b =>
                {
                    b.HasOne("OCMS03.Models.ApplicationUser", "Patient")
                        .WithMany("Patient_Meds")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("OCMS03.Models.ApplicationUser", "Pharmacist")
                        .WithMany("Pharmacist_Meds")
                        .HasForeignKey("PharmacistId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
